// <auto-generated />
using System;
using Databaseku;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Databaseku.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20240613022740_Update tabel ")]
    partial class Updatetabel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Databaseku.Model.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChatID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Databaseku.Model.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpecialistID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DoctorID");

                    b.HasIndex("SpecialistID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Databaseku.Model.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PatientID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Databaseku.Model.Specialist", b =>
                {
                    b.Property<int>("SpecialistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SpecialistID");

                    b.ToTable("Specialist");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<int>("DoctorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientsPatientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DoctorID", "PatientsPatientID");

                    b.HasIndex("PatientsPatientID");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("Databaseku.Model.Chat", b =>
                {
                    b.HasOne("Databaseku.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Databaseku.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Databaseku.Model.Doctor", b =>
                {
                    b.HasOne("Databaseku.Model.Specialist", "SpecialistItem")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialistID");

                    b.Navigation("SpecialistItem");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("Databaseku.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Databaseku.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsPatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Databaseku.Model.Specialist", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
